services:
  db:
    image: postgres:17
    container_name: sjfjuristas-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: sjfjuristas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "12345678"
    ports:
      - "5432:5432"
    volumes:
      - ./db/01-script.sql:/docker-entrypoint-initdb.d/init-schema.sql
      - ./db/02-create-extensions.sql:/docker-entrypoint-initdb.d/create-extensions.sql
      - ./db/03-seed.sql:/docker-entrypoint-initdb.d/seed.sql
      - db_data:/var/lib/postgresql/data
    networks:
      - sjf-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: sjfjuristas-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: "12345678"
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - sjf-network

  minio:
    image: minio/minio:latest
    container_name: sjfjuristas-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: "12345678"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sjf-network

  create-bucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      echo 'Esperando o Minio ficar pronto...';
      until /usr/bin/mc alias set minio http://minio:9000 admin 12345678; do
          echo '...ainda esperando' && sleep 1;
      done;
      echo 'Minio pronto! Criando buckets...';
      /usr/bin/mc mb minio/propostas-documentos --ignore-existing;
      /usr/bin/mc anonymous set public minio/propostas-documentos;
      /usr/bin/mc mb minio/pix-qrcodes --ignore-existing;
      /usr/bin/mc anonymous set public minio/pix-qrcodes;
      /usr/bin/mc mb minio/comprovantes --ignore-existing

      echo 'Buckets criados e pol√≠ticas aplicadas com sucesso!';
      exit 0;
      "
    networks:
      - sjf-network

  backend:
    build: ./backend
    container_name: sjfjuristas-backend
    restart: unless-stopped
    depends_on:
      - db
      - create-bucket
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/sjfjuristas
      - MINIO_URL=http://minio:9000
    networks:
      - sjf-network

  frontend:
    build: ./frontend/sjf-juristas-next
    container_name: sjfjuristas-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - sjf-network

  nginx:
    image: nginx:alpine
    container_name: sjfjuristas-proxy
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - sjf-network
  # dev
  ngrok:
    image: ngrok/ngrok:latest
    container_name: sjfjuristas-ngrok
    restart: unless-stopped
    env_file:
      - .env
    command:
      - "http"
      - "nginx:80"
      - "--log=stdout"
    depends_on:
      - nginx
    ports:
      - "4040:4040"
    networks:
      - sjf-network

networks:
  sjf-network:
    driver: bridge

volumes:
  db_data:
  pgadmin_data:
  minio_data:
